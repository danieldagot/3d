{"version":3,"sources":["3d.js","App.js","Three.js","serviceWorker.js","index.js"],"names":["OrbitControls","require","ThreeD","getLen","inputtxt","undefined","match","console","log","split","reverse","join","bool","text","color","camera","scene","renderer","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","THREE","position","set","loader","load","texture","background","font","textGeometry","size","height","curveSegments","bevelThickness","bevelSize","bevelEnabled","computeBoundingBox","computeVertexNormals","centerOffset","boundingBox","max","x","min","color2","textMaterial","transparent","opacity","mesh","y","add","antialias","setPixelRatio","devicePixelRatio","document","body","appendChild","domElement","controls","enablePan","update","addEventListener","init","animate","requestAnimationFrame","render","react_default","a","createElement","this","props","Component","App","React","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateText","event","temp","target","value","updateColor","change","setState","state","jquery","remove","className","type","name","onChange","id","cols","rows","placeholder","onClick","_3d","Boolean","location","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAGMA,EAAgBC,EAAQ,IAyIfC,6MArCbC,OAAS,SAACC,GAMR,QAAgBC,GAAZD,EAAuB,CAIzB,OAAIA,EAASE,MADC,mBAEZC,QAAQC,IAAIJ,GACLA,GAIcA,EAZZK,MAAM,IAAIC,UAAUC,KAAK,0EAnGnCC,EAAMC,EAAMC,GAKf,IAAIC,EAAQC,EAAOC,EAmEnB,SAASC,IACPH,EAAOI,OAASC,OAAOC,WAAaD,OAAOE,YAC3CP,EAAOQ,yBACPN,EAASO,QAAQJ,OAAOC,WAAYD,OAAOE,cAtEG,YAC9CP,EAAS,IACPU,oBAAwB,GAAIL,OAAOC,WAAaD,OAAOE,YAAa,EAAG,MAClEI,SAASC,IAAI,EAAG,EAAG,KAC1BX,EAAQ,IAAIS,QAEZ,IAAIG,EAAS,IAAIH,cACT,IAAIA,iBACFI,KAAK,qEAAuE,SAASC,GAE9Ed,EAAMe,WAAaD,IAEpCF,EAAOC,KACL,6GAA8G,SAAUG,GActH,IAAIC,EAAe,IAAIR,eAAmBZ,EAAM,CAC9CmB,KAAMA,EACNE,KAAM,GACNC,OAAQ,GACRC,cAAe,GACfC,eAAgB,EAChBC,UAAW,EACXC,cAAc,IAGhBN,EAAaO,qBACbP,EAAaQ,uBACb,IAAIC,GAAiB,IAAQT,EAAaU,YAAYC,IAAIC,EAAIZ,EAAaU,YAAYG,IAAID,GAMvFE,EAAS,IAAItB,QAAYX,GACzBkC,EAAe,IAAIvB,oBAAwB,CAAEX,MAAOiC,EAAQE,aAAa,EAAOC,QAAS,KAGzFC,EAAO,IAAI1B,OAAWQ,EAAce,GACxCG,EAAKzB,SAASmB,EAAIH,EAClBS,EAAKzB,SAAS0B,EAAI,EAClBpC,EAAMqC,IAAIF,MAGdlC,EAAW,IAAIQ,gBAAoB,CAAE6B,WAAW,KACvCC,cAAcnC,OAAOoC,kBAAmBvC,EAASO,QAAQJ,OAAOC,WAAYD,OAAOE,aAE5FmC,SAASC,KAAKC,YAAY1C,EAAS2C,YACnC,IAAIC,EAAW,IAAI7D,EAAce,EAAOE,EAAS2C,YACjDC,EAASC,WAAY,EAErB/C,EAAOW,SAASC,IAAI,EAAG,EAAG,KAE1BkC,EAASE,SACT3C,OAAO4C,iBAAiB,SAAU9C,GAAgB,GAjEvB+C,GAwE7B,SAASC,IACPC,sBAAsBD,GAKV,GAARtD,GACFK,EAASmD,OAAOpD,EAAOD,GA/EUmD,oCAkHrC,OACEG,EAAAC,EAAAC,cAAA,WACGC,KAAK3D,KAAK2D,KAAKC,MAAM7D,KAAM4D,KAAKrE,OAAOqE,KAAKC,MAAM5D,MAAO2D,KAAKC,MAAM3D,eA3HxD4D,8DC6ENC,SC/EoBC,IAAMF,sBDMvC,SAAAC,IAAc,IAAAE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAG,IAEZE,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAV,QAcFW,WAAa,SAACC,GAQZP,EAAKQ,KAAOD,EAAME,OAAOC,MACzBhF,QAAQC,IAAIqE,EAAKQ,OAzBLR,EA4BdW,YAAc,SAACJ,GASbP,EAAK/D,MAAQsE,EAAME,OAAOC,MAC1BhF,QAAQC,IAAIqE,EAAK/D,QAtCL+D,EAwCdY,OAAS,WAEPZ,EAAKa,SAAS,CACZ5E,MAAO+D,EAAK/D,MACZD,KAAMgE,EAAKQ,MACV,WACD9E,QAAQC,IAAIgE,KAAKmB,MAAM9E,SA3CzBgE,EAAKQ,KAAO,GACZR,EAAK/D,MAAQ,GACb+D,EAAKc,MAAQ,CACX9E,KAAM,QACND,MAAM,EACNE,MAAO,WARG+D,wEAyDZ,OAFHe,IAAO,UAAUC,SAIZxB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,QACbzB,EAAAC,EAAAC,cAAA,SAAOwB,KAAK,QAAQC,KAAK,WAAWC,SAAUzB,KAAKgB,cACnDnB,EAAAC,EAAAC,cAAA,YAAW2B,GAAG,aAAaC,KAAK,KAAKC,KAAK,IAAKH,SAAUzB,KAAKW,WAAYkB,YAAY,SACtFhC,EAAAC,EAAAC,cAAA,UAAQ+B,QAAS9B,KAAKiB,QAAtB,UACCjB,KAAKmB,MAAM/E,KAAQyD,EAAAC,EAAAC,cAAA,OAAKuB,UAAW,SAAhB,KAA0BzB,EAAAC,EAAAC,cAACgC,EAAD,CAAQ1F,KAAQ2D,KAAKmB,MAAM9E,KAAMD,KAAO,OAAe,KACpGyD,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,SAAf,KAAyBzB,EAAAC,EAAAC,cAACgC,EAAD,CAAQ1F,KAAM2D,KAAKmB,MAAM9E,KAAMD,KAAK,IAAIE,MAAO0D,KAAKmB,MAAM7E,iBAjE1E4D,cEGE8B,QACW,cAA7BpF,OAAOqF,SAASC,UAEe,UAA7BtF,OAAOqF,SAASC,UAEhBtF,OAAOqF,SAASC,SAASpG,MACvB,2DCZNqG,IAASvC,OAAOC,EAAAC,EAAAC,cAACqC,EAAD,MAASnD,SAASoD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eeb0a1b1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\n\nconst OrbitControls = require('three-orbitcontrols')\n//let SVGLoader = require('three-svg-loader')\n\nclass ThreeD extends Component {\n\n  text(bool, text, color) {\n    // === THREE.JS CODE START ===\n\n\n\n    let camera, scene, renderer; init(); animate(); function init() {\n      camera = new\n        THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 1, 10000);\n      camera.position.set(0, 0, 600); \n      scene = new THREE.Scene(); \n //     scene.background = new THREE.Color(0xf0f0f0);\n      let loader = new THREE.FontLoader();\n let loder1 = new THREE.TextureLoader();\n         loder1.load('https://images.pexels.com/photos/1205301/pexels-photo-1205301.jpeg' , function(texture)\n                      {\n                       scene.background = texture;  \n                      });\n      loader.load(\n        'https://raw.githubusercontent.com/danieldagot/3dhod/master/Open%20Sans%20Hebrew%20Extra%20Bold_Italic.json', function (font) {\n          // let xMid, text; let color = new THREE.Color(0x006699);\n          //  let matDark = new THREE.MeshBasicMaterial({ color: color, side: THREE.DoubleSide });\n          //   let matLite = new THREE.MeshBasicMaterial(\n          //   { color: color, transparent: true, opacity: 0.4, side: THREE.DoubleSide }); \n          //   let message = \"shlom hod\"; let shapes = font.generateShapes(message, 100);\n          //    let geometry = new THREE.ShapeBufferGeometry(shapes); geometry.computeBoundingBox();\n          // xMid = - 0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x); \n          // geometry.translate(xMid, 0, 0); // make shape ( N.B. edge view not visible ) \n          // text = new THREE.Mesh(geometry, matLite); text.position.z = - 150; scene.add(text);\n          // // make line shape ( N.B. edge view remains visible )\n\n        \n\n          var textGeometry = new THREE.TextGeometry(text, {\n            font: font,\n            size: 30,\n            height: 10,\n            curveSegments: 12,\n            bevelThickness: 1,\n            bevelSize: 1,\n            bevelEnabled: true,\n\n          });\n          textGeometry.computeBoundingBox();\n          textGeometry.computeVertexNormals();\n          let centerOffset = - 0.5 * ( textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x );\n          // let textMaterial =  new THREE.MeshPhongMaterial( {\n          //   shading: THREE.FlatShading,\n          //   transparent: true,\n          //   opacity: 0.7,\n          // } );\n          let color2 = new THREE.Color(color);\n          let textMaterial = new THREE.MeshBasicMaterial({ color: color2, transparent: false, opacity: 0.4 });\n\n          //#8080ff\n          let mesh = new THREE.Mesh(textGeometry, textMaterial);\n          mesh.position.x = centerOffset;\n          mesh.position.y = 0;\n          scene.add(mesh);\n\n        }); //end load ffunction\n      renderer = new THREE.WebGLRenderer({ antialias: false });\n      renderer.setPixelRatio(window.devicePixelRatio); renderer.setSize(window.innerWidth, window.innerHeight\n      );\n      document.body.appendChild(renderer.domElement);\n      let controls = new OrbitControls(camera,renderer.domElement);\n      controls.enablePan = false\n     \n      camera.position.set(0, 0, 600)\n      //controls.target.set(0, 0, 0);\n      controls.update();\n      window.addEventListener('resize', onWindowResize, true);\n    } // end init\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n    function animate() {\n      requestAnimationFrame(animate);\n      render();\n    }\n\n    function render() {\n      if (bool == true) {\n        renderer.render(scene, camera);\n      }\n      else {\n\n      }\n    }\n\n\n  }\n\n\n  getLen = (inputtxt) => {\n\n\n    function reverseString(str) {\n      return str.split(\"\").reverse().join(\"\");\n    }\n    if (inputtxt != undefined) {\n\n\n      var letters = /^[A-Za-z1-9]+$/;\n      if (inputtxt.match(letters)) {\n        console.log(inputtxt);\n        return inputtxt;\n      }\n      else {\n\n        return reverseString(inputtxt);\n      }\n    }\n\n  }\n\n  render() {\n\n    return (\n      <div>\n        {this.text(this.props.bool, this.getLen(this.props.text), this.props.color)}\n      </div>\n\n\n\n    )\n  }\n}\n\n\n\nexport default ThreeD;\n","\nimport React, { Component } from \"react\";\n// import * as THREE from \"three\";\nimport ThreeD from \"./3d\";\nimport jquery from \"jquery\"\nimport Three from \"./Three\"\n// const OrbitControls = require('three-orbitcontrols')\n// let SVGLoader = require('three-svg-loader')\n\nclass App extends Component {\n  constructor() {\n\n    super()\n    this.temp = \"\"\n    this.color = \"\"\n    this.state = {\n      text: \"hello\",\n      bool: false,\n      color: \"#00ff00\"\n\n    }\n  }\n\n\n\n\n  updateText = (event) => {\n    // jquery.get(\".temp\").empty()\n    // this.setState({\n    //   temp: event.target.value\n    // }, function () {\n    //   console.log(this.state.text)\n\n    // })\n    this.temp = event.target.value\n    console.log(this.temp)\n  }\n\n  updateColor = (event) => {\n    // jquery.get(\".temp\").empty()\n    // this.setState({\n    //   color: event.target.value\n    // }, function () {\n    //   console.log(this.state.color)\n\n    // })\n\n    this.color = event.target.value\n    console.log(this.color);\n  }\n  change = () => {\n\n    this.setState({\n      color: this.color,\n      text: this.temp\n    }, function () {\n      console.log(this.state.text)\n      \n    })\n\n  }\n\n\n  render() {\n    \n jquery(\"canvas\").remove()\n  \n    return (\n\n      <div className=\"temp\">\n        <input type=\"color\" name=\"favcolor\" onChange={this.updateColor} />\n        <textarea  id=\"name-input\" cols=\"40\" rows=\"1\"  onChange={this.updateText} placeholder=\"text\" />\n        <button onClick={this.change}>update</button>\n        {this.state.bool  ? <div className =\"temp2\">  <ThreeD text = {this.state.text} bool = \"1\" /></div> : null }\n         <div className=\"temp2\">  <ThreeD text={this.state.text} bool=\"1\" color={this.state.color}   /></div>\n        {/* <Three text={this.state.text}  /> */}\n      </div>\n\n    )\n  }\n}\n\n\nexport default App;\n  // componentDidMount() {\n  //   // === THREE.JS CODE START ===\n\n\n\n  //   let camera, scene, renderer; init(); animate(); function init() {\n  //     camera = new\n  //       THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000); camera.position.set(0, - 400, 600); scene = new THREE.Scene(); scene.background = new THREE.Color(0xf0f0f0); let loader = new THREE.FontLoader(); loader.load(\n  //         'https://raw.githubusercontent.com/rollup/three-jsnext/master/examples/fonts/gentilis_bold.typeface.json', function (font) {\n  //           // let xMid, text; let color = new THREE.Color(0x006699);\n  //           //  let matDark = new THREE.MeshBasicMaterial({ color: color, side: THREE.DoubleSide });\n  //           //   let matLite = new THREE.MeshBasicMaterial(\n  //           //   { color: color, transparent: true, opacity: 0.4, side: THREE.DoubleSide }); \n  //           //   let message = \"shlom hod\"; let shapes = font.generateShapes(message, 100);\n  //           //    let geometry = new THREE.ShapeBufferGeometry(shapes); geometry.computeBoundingBox();\n  //           // xMid = - 0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x); \n  //           // geometry.translate(xMid, 0, 0); // make shape ( N.B. edge view not visible ) \n  //           // text = new THREE.Mesh(geometry, matLite); text.position.z = - 150; scene.add(text);\n  //           // // make line shape ( N.B. edge view remains visible )\n\n\n\n  //           var textGeometry = new THREE.TextGeometry( \"hoooooood\", {\n  //             font: font,\n  //             size: 60,\n  //             height: 10,\n  //             curveSegments: 12,\n  //             bevelThickness: 1,\n  //             bevelSize: 1,\n  //             bevelEnabled: true\n  //           });\n\n  //           var textMaterial = new THREE.MeshPhongMaterial( \n  //             { color: 0xdddddd,}\n  //           );\n\n  //           var mesh = new THREE.Mesh( textGeometry, textMaterial );\n\n  //           scene.add( mesh );\n\n  //         }); //end load ffunction\n  //     renderer = new THREE.WebGLRenderer({ antialias: true }); renderer.setPixelRatio(window.devicePixelRatio); renderer.setSize(window.innerWidth, window.innerHeight\n  //     ); document.body.appendChild(renderer.domElement); let controls = new OrbitControls(camera, renderer.domElement); controls.target.set(0, 0, 0); controls.update(); window.addEventListener('resize', onWindowResize, false);\n  //   } // end init\n  //   function onWindowResize() { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize(window.innerWidth, window.innerHeight); } function animate() {\n  //     requestAnimationFrame(animate); render();\n  //   } function render() { renderer.render(scene, camera); }\n\n\n\n  //   // let scene = new THREE.Scene();\n  //   // let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n  //   // let renderer = new THREE.WebGLRenderer();\n  //   // renderer.setSize( window.innerWidth, window.innerHeight );\n  //   // document.body.appendChild( renderer.domElement );\n  //   // let geometry = new THREE.BoxGeometry( 1, 1, 1 );\n  //   // let material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n  //   // let cube = new THREE.Mesh( geometry, material );\n\n  //   // // let text = new THREE.TextGeometry( 'Hello three.js!', {\n  //   // //   font: \"helvetiker\",\n  //   // //   size: 80,\n  //   // //   height: 5,\n  //   // //   curveSegments: 12,\n  //   // //   bevelEnabled: true,\n  //   // //   bevelThickness: 10,\n  //   // //   bevelSize: 8,\n  //   // //   bevelOffset: 0,\n  //   // //   bevelSegments: 5\n  //   // // } );\n  //   // let loader = new THREE.FontLoader();\n\n  //   // loader.load( 'fonts/helvetiker_regular.typeface.json', function ( font ) {\n\n  //   //   let geometry = new THREE.TextGeometry( 'Hello three.js!', {\n  //   //     font: font,\n  //   //     size: 80,\n  //   //     height: 5,\n  //   //     curveSegments: 12,\n  //   //     bevelEnabled: true,\n  //   //     bevelThickness: 10,\n  //   //     bevelSize: 8,\n  //   //     bevelOffset: 0,\n  //   //     bevelSegments: 5\n  //   //   } );\n  //   // } );\n\n  //   // scene.add( cube );\n  //   // //scene.add(geometry)\n  //   // camera.position.z = 5;\n  //   // let animate = function () {\n  //   //   requestAnimationFrame( animate );\n  //   //   cube.rotation.x += 0.01;\n  //   //   cube.rotation.y += 0.01;\n  //   //   renderer.render( scene, camera );\n  //   // };\n  //   // animate();\n  //   // // === THREE.JS EXAMPLE CODE END ===\n  // }","import React from 'react';\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\nimport * as THREE from 'three';\r\nimport './Three.scss';\r\nexport default class Three extends React.Component {\r\n  state = {\r\n    width: 512,\r\n    height: 512\r\n  };\r\n\r\n  /**\r\n   * Rendering\r\n   */\r\n  render() {\r\n    return (\r\n      <div className='three' ref={(el) => { this.three = el } } { ...this.loade}></div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initialization\r\n   */\r\n  componentDidMount () {\r\n    this.loader = new THREE.FontLoader();\r\n   \r\n    console.log(this.text);\r\n    \r\n    this.loade = async () => {\r\n      this.text = this.props.text\r\n      let OrbitControls = require('three-orbitcontrols')\r\n      await this.loader.load('https://raw.githubusercontent.com/danieldagot/3dhod/master/Open%20Sans%20Hebrew%20Extra%20Bold_Italic.json', font => {\r\n        this.scene = new THREE.Scene();\r\n        this.camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 1, 10000);\r\n        this.camera.position.set(0, 0, 600);\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: false });\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.three.appendChild(this.renderer.domElement);\r\n\r\n        this.group = new THREE.Group();\r\n        this.group.position.y = 100;\r\n        this.scene.add(this.group);\r\n        // this.directionalLight = new THREE.DirectionalLight(0x9090aa);\r\n        // this.directionalLight.position.set(-10, 10, -10).normalize();\r\n        // this.scene.add(this.directionalLight);\r\n\r\n        // this.hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x444444);\r\n        // this.hemisphereLight.position.set(1, 1, 1);\r\n        // this.scene.add(this.hemisphereLight);\r\n\r\n        this.geometry = new THREE.TextGeometry(this.text, {\r\n          font: font,\r\n          size: 60,\r\n          height: 10,\r\n          curveSegments: 12,\r\n          bevelThickness: 1,\r\n          bevelSize: 1,\r\n          bevelEnabled: true,\r\n        });\r\n        this.geometry.computeBoundingBox();\r\n        this.geometry.computeVertexNormals();\r\n        var centerOffset = - 0.5 * (this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x);\r\n        this.material = new THREE.MeshBasicMaterial({ color: 0x00ff00, transparent: false, opacity: 0.4 });\r\n        this.cube = new THREE.Mesh(this.geometry, this.material);\r\n        this.cube.position.x = centerOffset;\r\n        this.cube.position.y = -100;\r\n        this.cube.position.z = 0;\r\n\r\n        //this.camera.lookAt (new THREE.Vector3(0,0,0))\r\n\r\n        this.cube.rotation.x = 0;\r\n        this.group.add(this.cube)\r\n        //this.scene.add(this.cube);\r\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n        // this.controls.minPolarAngle = Math.PI/2;\r\n        // this.controls.maxPolarAngle = Math.PI/2;\r\n        this.controls.enablePan = false\r\n\r\n\r\n        this.animate();\r\n\r\n        this.observer = new ResizeObserver(entries => {\r\n          const { width, height } = entries[0].contentRect;\r\n          this.setState({\r\n            width: Math.floor(width),\r\n            height: Math.floor(height)\r\n          });\r\n        });\r\n\r\n        this.observer.observe(this.three);\r\n      }\r\n\r\n      )\r\n    }\r\n    this.loade()\r\n  }\r\n  /**\r\n   * Animation loop\r\n   */\r\n  animate() {\r\n    requestAnimationFrame(this.animate.bind(this));\r\n    // var centerOffset = - 0.5 * ( this.geometry.boundingBox.max.x - this.geometry.boundingBox.min.x );\r\n    // this.cube.position.x = centerOffset;\r\n    // this.cube.position.y = -100;\r\n    // this.cube.position.z = 0;\r\n    this.controls.update()\r\n    this.renderer.render(this.scene, this.camera);\r\n  }\r\n\r\n  /**\r\n   * Invalidation handler\r\n   */\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    this.renderer.setSize(this.state.width, this.state.height);\r\n    this.camera.aspect = this.state.width / this.state.height;\r\n    this.camera.updateProjectionMatrix();\r\n    this.renderer.render(this.scene, this.camera);\r\n    console.log(prevProps);\r\n    \r\n  }\r\n\r\n  /**\r\n   * Dispose\r\n   */\r\n  componentWillUnmount() {\r\n    this.observer.disconnect();\r\n    \r\n    \r\n  }\r\n\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}